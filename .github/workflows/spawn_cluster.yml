name: Daily Performance Tests

on:
  workflow_dispatch:
    inputs:
      zipURL:
        description: 'Ballerina Zip Distribution URL'
        required: false
  schedule:
    - cron:  '0 6 * * *'
jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 600
    steps:
    - name: CHECKOUT
      uses: actions/checkout@v2
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Create Cluster
      env:
        AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
        AZURE_APP_PASSWORD: ${{ secrets.AZURE_APP_PASSWORD }}
        RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
      run: |
        az aks create \
            --resource-group "${RESOURCE_GROUP}" \
            --name "${{ secrets.CLUSTER_NAME }}" \
            --service-principal "${AZURE_APP_ID}"\
            --client-secret "${AZURE_APP_PASSWORD}" \
            --node-vm-size "Standard_F16s" \
            --node-count 1 \
            --location "eastus" \
            --generate-ssh-keys
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ secrets.CLUSTER_NAME }}
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy Niginx
      run: |
        # Create a namespace for your ingress resources
        kubectl create namespace ingress-basic

        # Add the ingress-nginx repository
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

        # Use Helm to deploy an NGINX ingress controller
        helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-basic \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux
        # Wait for ingress ip
        kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
        -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
        | head -n1
        kubectl apply -f https://raw.githubusercontent.com/ballerina-platform/ballerina-performance-cloud/main/base-image/volumes.yaml
  h1_h1_passthrough:
    needs: setup
    name: h1_h1_passthrough
    runs-on: ubuntu-latest
    steps:
    - name: Trigger h1_h1_passthrough
      uses: felixp8/dispatch-and-wait@v0.1.0
      with:
        owner: ballerina-platform
        repo: ballerina-performance-cloud
        token: ${{ secrets.BALLERINA_BOT_TOKEN }}
        event_type: h1_h1_passthrough
        client_payload: '{"zipURL":"${{github.event.inputs.zipURL}}"}'
        wait_time: 600
        max_time: 10800
  h1_transformation:
    needs: h1_h1_passthrough
    name: h1_transformation
    runs-on: ubuntu-latest
    steps:
    - name: Trigger h1_transformation
      uses: felixp8/dispatch-and-wait@v0.1.0
      with:
        owner: ballerina-platform
        repo: ballerina-performance-cloud
        token: ${{ secrets.BALLERINA_BOT_TOKEN }}
        event_type: h1_transformation
        client_payload: '{"zipURL":"${{github.event.inputs.zipURL}}"}'
        wait_time: 600
        max_time: 10800
  h1c_h1c_passthrough:
    needs: h1_transformation
    name: h1c_h1c_passthrough
    runs-on: ubuntu-latest
    steps:
    - name: Trigger h1c_h1c_passthrough
      uses: felixp8/dispatch-and-wait@v0.1.0
      with:
        owner: ballerina-platform
        repo: ballerina-performance-cloud
        token: ${{ secrets.BALLERINA_BOT_TOKEN }}
        event_type: h1c_h1c_passthrough
        client_payload: '{"zipURL":"${{github.event.inputs.zipURL}}"}'
        wait_time: 600
        max_time: 10800
  h1c_transformation:
    needs: h1c_h1c_passthrough
    name: h1c_transformation
    runs-on: ubuntu-latest
    steps:
    - name: Trigger h1c_transformation
      uses: felixp8/dispatch-and-wait@v0.1.0
      with:
        owner: ballerina-platform
        repo: ballerina-performance-cloud
        token: ${{ secrets.BALLERINA_BOT_TOKEN }}
        event_type: h1c_transformation
        client_payload: '{"zipURL":"${{github.event.inputs.zipURL}}"}'
        wait_time: 600
        max_time: 10800
  observability_enabled:
    needs: h1c_transformation
    name: observability_enabled
    runs-on: ubuntu-latest
    steps:
    - name: Trigger h1c_transformation
      uses: felixp8/dispatch-and-wait@v0.1.0
      with:
        owner: ballerina-platform
        repo: ballerina-performance-cloud
        token: ${{ secrets.BALLERINA_BOT_TOKEN }}
        event_type: observability_enabled
        client_payload: '{"zipURL":"${{github.event.inputs.zipURL}}"}'
        wait_time: 600
        max_time: 10800
  cleanup:
    needs: observability_enabled
    name: clean up
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Cleaning up the cluster
      if: always()
      uses: azure/CLI@v1
      with:
        azcliversion: "agentazcliversion"
        inlineScript: |
          az group delete --name mc_${{ secrets.CLUSTER_RESOURCE_GROUP }}_${{ secrets.CLUSTER_NAME }}_eastus -y
          az aks delete --name ${{ secrets.CLUSTER_NAME }} --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP }} -y