name: HTTP Tests Workflow

on:
  workflow_dispatch:
  repository_dispatch:
    types: [h1_h1_passthrough, h1_transformation, h1c_h1c_passthrough, h1c_transformation, observability_enabled]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        payload: [50, 1024]
        users: [60, 200]
    env:
      TEST_NAME: ${{github.event.action}}
      TEST_ROOT: "load-tests"
    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Write Test Name to outputs
      id: testname
      run: |
        echo "::set-output name=test-name::${TEST_NAME}"
    - name: Ballerina Build from Nightly Pack
      if: ${{ github.event.client_payload.zipURL == '' }}
      uses: ballerina-platform/ballerina-action@nightly
      env:
        CI_BUILD: true
        WORKING_DIR: load-tests/${{ steps.testname.outputs.test-name }}/src
      with:
        args:
          build
    - name: Ballerina Build from Distribution ZIP
      id: zip
      if: ${{ github.event.client_payload.zipURL != '' }}
      run: |
        wget -c ${{ github.event.client_payload.zipURL }}
        filename=$(basename -- "${{ github.event.client_payload.zipURL }}")
        filename="${filename%.*}"
        echo "Distribution: ${filename}"
        unzip -q ${filename}.zip
        export CI_BUILD=true
        export BAL_PATH=`pwd`/${filename}
        echo "var ${BAL_PATH}"
        pushd load-tests/${TEST_NAME}/src
        ls -ltr
        $BAL_PATH/bin/bal version > tmp1.txt
        version_out=$(cat tmp1.txt | head -n 1)
        echo "::set-output name=version::${version_out}"
        $BAL_PATH/bin/bal build
    - name: Docker push
      run: docker push ballerina/${TEST_NAME}:latest
    - name: Copy artifacts
      run: |
        ls -ltr
        cp -a ${TEST_ROOT}/${TEST_NAME}/src/target/kubernetes/${TEST_NAME}/. ${TEST_ROOT}/${TEST_NAME}/deployment/
    - name: 'Install Kustomize'
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: 'Run Kustomize'
      run: |
        kustomize build ${TEST_ROOT}/${TEST_NAME}/deployment > ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ secrets.CLUSTER_NAME }}
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy artifacts
      run: |
        kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Write values to outputs
      id: write
      run: |
        echo "::set-output name=cluster-ip::$(kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
                                              -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
                                              | head -n1)"
        echo "::set-output name=scenario-name::${TEST_NAME}"
        echo "::set-output name=vm-name::bal-perf-vm-`echo ${TEST_NAME} | tr '_' '-'`-${{ matrix.users }}-${{ matrix.payload }}-${{ GITHUB.RUN_NUMBER }}"
        echo "::set-output name=git-token::${{ secrets.BALLERINA_BOT_TOKEN }}"
        echo "::set-output name=space-id::${{ secrets.SPACE_ID }}"
        echo "::set-output name=message-key::${{ secrets.MESSAGE_KEY }}"
        echo "::set-output name=chat-token::${{ secrets.CHAT_TOKEN }}"
        echo "::set-output name=custom-image-name::$(cat image.txt)"
        if [[ -z "${{steps.zip.outputs.version}}" ]]; then
          docker run --entrypoint "/ballerina/runtime/bin/bal" ballerina/ballerina:nightly "version" > tmp.txt
          version_out=$(cat tmp.txt | head -n 1)
        else 
          version_out="${{steps.zip.outputs.version}}"
        fi
        echo "::set-output name=version::${version_out}"
    - name: Deploy Jmeter container
      run: |
        sed -i -e 's/<<CLUSTER_IP>>/${{ steps.write.outputs.cluster-ip }}/g' base-image/k8s.yaml
        sed -i -e 's/<<REPO_NAME>>/ballerina-performance-cloud/g' base-image/k8s.yaml
        sed -i -e 's/<<SCENARIO_NAME>>/${{ steps.write.outputs.scenario-name }}/g' base-image/k8s.yaml
        sed -i -e 's/<<GITHUB_TOKEN>>/${{steps.write.outputs.git-token}}/g' base-image/k8s.yaml
        sed -i -e 's/<<PAYLOAD_SIZE>>/${{ matrix.payload }}/g' base-image/k8s.yaml
        sed -i -e 's/<<SPACE_ID>>/${{steps.write.outputs.space-id}}/g' base-image/k8s.yaml
        sed -i -e 's/<<MESSAGE_KEY>>/${{steps.write.outputs.message-key}}/g' base-image/k8s.yaml
        sed -i -e 's/<<CHAT_TOKEN>>/${{steps.write.outputs.chat-token}}/g' base-image/k8s.yaml
        sed -i -e 's/<<DISPATCH_TYPE>>//g' base-image/k8s.yaml
        sed -i -e 's/<<BRANCH_NAME>>//g' base-image/k8s.yaml
        sed -i -e 's/<<CONCURRENT_USERS>>/${{ matrix.users }}/g' base-image/k8s.yaml
        sed -i -e 's/<<VERSION>>/${{ steps.write.outputs.version }}/g' base-image/k8s.yaml
        kubectl apply -f base-image/k8s.yaml
        while [[ $(kubectl get pods -l app=jmeter -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done
        kubectl logs -f -l app="jmeter"
        kubectl wait --for=condition=complete  --timeout=2h job/jmeter-job
    - name: Pod logs
      if: always()
      run: |
        kubectl logs -l logs=true
    - name: Undeploy Kubernetes artifacts
      if: always()
      run: |
        kubectl delete -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
        kubectl delete -f base-image/k8s.yaml
