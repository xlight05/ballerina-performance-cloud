name: Sockperf exec
on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Cluster name'
        default: 'bal-perf-cluster-test'
        required: false
jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        vm_count: [1 ]
    timeout-minutes: 600
    env:
      TEST_NAME: "netty_hello"
      TEST_ROOT: "tests"
    steps:
    - name: CHECKOUT
      uses: actions/checkout@v2
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: '${{ github.event.inputs.clusterName }}'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy artifacts
      run: |
        kubectl apply -f sockperf/server/k8s.yaml
    - name: Write values to outputs
      id: write
      run: |
        echo "::set-output name=cluster-ip::$(kubectl get svc sock-server -o jsonpath='{..ip}')"
        echo "::set-output name=vm-name::sock-perf-${{ GITHUB.RUN_NUMBER }}-${{ matrix.vm_count }}"
        echo "::set-output name=ppg-id::/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/ballerina-performance/providers/Microsoft.Compute/proximityPlacementGroups/${{ secrets.PPG_NAME }}"
    - name: Create VM Instance
      id: vminstance
      uses: azure/CLI@v1
      with:
        azcliversion: "agentazcliversion"
        inlineScript: |
          az vm create --resource-group "${{ secrets.CLUSTER_RESOURCE_GROUP }}"  --name "${{ steps.write.outputs.vm-name }}"  --admin-username "${{ secrets.VM_USER }}" --location  eastus \
          --image "Canonical:UbuntuServer:18.04-LTS:latest" --tags benchmark-number=${{ steps.write.outputs.vm-name }} --size Standard_F16s_v2 --ppg ${{ steps.write.outputs.ppg-id }}  --generate-ssh-keys --accelerated-networking true
          echo "::set-output name=ip-address::$(az vm show -d -g "${{ secrets.CLUSTER_RESOURCE_GROUP }}" -n "${{ steps.write.outputs.vm-name }}" --query publicIps -o tsv)"
          chmod +x ~/.ssh/id_rsa
          chmod 777 ~/.ssh/id_rsa
          chmod +x ~/.ssh/id_rsa
          chmod 777 ~/.ssh/id_rsa
          cp ~/.ssh/id_rsa $GITHUB_WORKSPACE
          cp ~/.ssh/id_rsa.pub $GITHUB_WORKSPACE
    - name: Execute performance tests
      uses: appleboy/ssh-action@master
      env: 
        IP: ${{ steps.write.outputs.cluster-ip }}
      with:
        host: ${{ steps.vminstance.outputs.ip-address }}
        username: ${{ secrets.VM_USER }}
        key_path: 'id_rsa'
        envs: IP
        command_timeout: '180m' #3 hours
        timeout: 300s #5 mins
        script: |
          export CLUSTER_IP=$IP
          git clone https://github.com/xlight05/ballerina-performance-cloud
          cd ballerina-performance-cloud/sockperf/client
          chmod +x start.sh
          bash start.sh
    - name: Undeploy artifacts
      if: always()
      run: |
        kubectl delete -f sockperf/server/k8s.yaml
    - name: Cleanup VM
      if: always()
      continue-on-error: true
      uses: azure/CLI@v1
      with:
        azcliversion: "agentazcliversion"
        inlineScript: |
          az resource delete --ids $(az resource list --tag benchmark-number=${{ steps.write.outputs.vm-name }} -otable --query "[].id" -otsv)
          var=`az disk list --query "[?tags.\"benchmark-number\"=='${{ steps.write.outputs.vm-name }}'].id" -otable -otsv`
          if [ -n "$var" ]
          then
              az resource delete --ids ${var}
          else
              echo "Disk is already deleted"
          fi